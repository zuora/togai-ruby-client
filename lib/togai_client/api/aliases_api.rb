=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class AliasesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an alias
    # This API let’s you to create an alias
    # @param create_bulk_alias_request [CreateBulkAliasRequest] Payload to create bulk aliases
    # @param [Hash] opts the optional parameters
    # @return [AliasPaginatedResponse]
    def create_alias(create_bulk_alias_request, opts = {})
      data, _status_code, _headers = create_alias_with_http_info(create_bulk_alias_request, opts)
      data
    end

    # Create an alias
    # This API let’s you to create an alias
    # @param create_bulk_alias_request [CreateBulkAliasRequest] Payload to create bulk aliases
    # @param [Hash] opts the optional parameters
    # @return [Array<(AliasPaginatedResponse, Integer, Hash)>] AliasPaginatedResponse data, response status code and response headers
    def create_alias_with_http_info(create_bulk_alias_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AliasesApi.create_alias ...'
      end
      # verify the required parameter 'create_bulk_alias_request' is set
      if @api_client.config.client_side_validation && create_bulk_alias_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_bulk_alias_request' when calling AliasesApi.create_alias"
      end
      # resource path
      local_var_path = '/aliases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_bulk_alias_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AliasPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AliasesApi.create_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AliasesApi#create_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an alias
    # This API let’s you to delete an alias using alias.
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_alias(_alias, opts = {})
      data, _status_code, _headers = delete_alias_with_http_info(_alias, opts)
      data
    end

    # Delete an alias
    # This API let’s you to delete an alias using alias.
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_alias_with_http_info(_alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AliasesApi.delete_alias ...'
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AliasesApi.delete_alias"
      end
      # resource path
      local_var_path = '/aliases/{alias}'.sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AliasesApi.delete_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AliasesApi#delete_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an alias
    # Get alias information using alias.
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [ModelAlias]
    def get_alias(_alias, opts = {})
      data, _status_code, _headers = get_alias_with_http_info(_alias, opts)
      data
    end

    # Get an alias
    # Get alias information using alias.
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelAlias, Integer, Hash)>] ModelAlias data, response status code and response headers
    def get_alias_with_http_info(_alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AliasesApi.get_alias ...'
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AliasesApi.get_alias"
      end
      # resource path
      local_var_path = '/aliases/{alias}'.sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelAlias'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AliasesApi.get_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AliasesApi#get_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all aliases
    # Returns a list of aliases with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [AliasPaginatedResponse]
    def list_aliases(opts = {})
      data, _status_code, _headers = list_aliases_with_http_info(opts)
      data
    end

    # List all aliases
    # Returns a list of aliases with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(AliasPaginatedResponse, Integer, Hash)>] AliasPaginatedResponse data, response status code and response headers
    def list_aliases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AliasesApi.list_aliases ...'
      end
      # resource path
      local_var_path = '/aliases'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AliasPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AliasesApi.list_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AliasesApi#list_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
