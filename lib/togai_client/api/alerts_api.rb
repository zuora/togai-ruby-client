=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class AlertsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an alert
    # Create an alert
    # @param create_alert_request [CreateAlertRequest] Payload to install an alert
    # @param [Hash] opts the optional parameters
    # @return [Alert]
    def create_alert(create_alert_request, opts = {})
      data, _status_code, _headers = create_alert_with_http_info(create_alert_request, opts)
      data
    end

    # Create an alert
    # Create an alert
    # @param create_alert_request [CreateAlertRequest] Payload to install an alert
    # @param [Hash] opts the optional parameters
    # @return [Array<(Alert, Integer, Hash)>] Alert data, response status code and response headers
    def create_alert_with_http_info(create_alert_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.create_alert ...'
      end
      # verify the required parameter 'create_alert_request' is set
      if @api_client.config.client_side_validation && create_alert_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_alert_request' when calling AlertsApi.create_alert"
      end
      # resource path
      local_var_path = '/alerts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_alert_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Alert'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.create_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#create_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an alert template
    # Get an alert template
    # @param alert_template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AlertTemplate]
    def get_alert_template(alert_template_id, opts = {})
      data, _status_code, _headers = get_alert_template_with_http_info(alert_template_id, opts)
      data
    end

    # Get an alert template
    # Get an alert template
    # @param alert_template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlertTemplate, Integer, Hash)>] AlertTemplate data, response status code and response headers
    def get_alert_template_with_http_info(alert_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.get_alert_template ...'
      end
      # verify the required parameter 'alert_template_id' is set
      if @api_client.config.client_side_validation && alert_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_template_id' when calling AlertsApi.get_alert_template"
      end
      # resource path
      local_var_path = '/alert_templates/{alert_template_id}'.sub('{' + 'alert_template_id' + '}', CGI.escape(alert_template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AlertTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.get_alert_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#get_alert_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List alert templates
    # Returns a list of alert templates with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [AlertTemplatesPaginatedResponse]
    def get_alert_templates(opts = {})
      data, _status_code, _headers = get_alert_templates_with_http_info(opts)
      data
    end

    # List alert templates
    # Returns a list of alert templates with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlertTemplatesPaginatedResponse, Integer, Hash)>] AlertTemplatesPaginatedResponse data, response status code and response headers
    def get_alert_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.get_alert_templates ...'
      end
      # resource path
      local_var_path = '/alert_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AlertTemplatesPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.get_alert_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#get_alert_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an incident
    # Get an incident
    # @param incident_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Incident]
    def get_incident(incident_id, opts = {})
      data, _status_code, _headers = get_incident_with_http_info(incident_id, opts)
      data
    end

    # Get an incident
    # Get an incident
    # @param incident_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Incident, Integer, Hash)>] Incident data, response status code and response headers
    def get_incident_with_http_info(incident_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.get_incident ...'
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AlertsApi.get_incident"
      end
      # resource path
      local_var_path = '/incidents/{incident_id}'.sub('{' + 'incident_id' + '}', CGI.escape(incident_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Incident'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.get_incident",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#get_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List incidents
    # Returns a list of incidents with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [IncidentsPaginatedResponse]
    def get_incidents(opts = {})
      data, _status_code, _headers = get_incidents_with_http_info(opts)
      data
    end

    # List incidents
    # Returns a list of incidents with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncidentsPaginatedResponse, Integer, Hash)>] IncidentsPaginatedResponse data, response status code and response headers
    def get_incidents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.get_incidents ...'
      end
      # resource path
      local_var_path = '/incidents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IncidentsPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.get_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#get_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List alerts
    # Returns a list of alerts with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [AlertsPaginatedResponse]
    def list_alerts(opts = {})
      data, _status_code, _headers = list_alerts_with_http_info(opts)
      data
    end

    # List alerts
    # Returns a list of alerts with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlertsPaginatedResponse, Integer, Hash)>] AlertsPaginatedResponse data, response status code and response headers
    def list_alerts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.list_alerts ...'
      end
      # resource path
      local_var_path = '/alerts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AlertsPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.list_alerts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#list_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an alert
    # Update an alert
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAlertRequest] :update_alert_request Payload to update alert
    # @return [Alert]
    def update_alert(alert_id, opts = {})
      data, _status_code, _headers = update_alert_with_http_info(alert_id, opts)
      data
    end

    # Update an alert
    # Update an alert
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAlertRequest] :update_alert_request Payload to update alert
    # @return [Array<(Alert, Integer, Hash)>] Alert data, response status code and response headers
    def update_alert_with_http_info(alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.update_alert ...'
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling AlertsApi.update_alert"
      end
      # resource path
      local_var_path = '/alerts/{alert_id}'.sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_alert_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Alert'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.update_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#update_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an incident status
    # Update an incident status
    # @param incident_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateIncidentStatusRequest] :update_incident_status_request Payload to update incident status
    # @return [Incident]
    def update_incident_status(incident_id, opts = {})
      data, _status_code, _headers = update_incident_status_with_http_info(incident_id, opts)
      data
    end

    # Update an incident status
    # Update an incident status
    # @param incident_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateIncidentStatusRequest] :update_incident_status_request Payload to update incident status
    # @return [Array<(Incident, Integer, Hash)>] Incident data, response status code and response headers
    def update_incident_status_with_http_info(incident_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.update_incident_status ...'
      end
      # verify the required parameter 'incident_id' is set
      if @api_client.config.client_side_validation && incident_id.nil?
        fail ArgumentError, "Missing the required parameter 'incident_id' when calling AlertsApi.update_incident_status"
      end
      # resource path
      local_var_path = '/incidents/{incident_id}/status'.sub('{' + 'incident_id' + '}', CGI.escape(incident_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_incident_status_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Incident'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.update_incident_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#update_incident_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
