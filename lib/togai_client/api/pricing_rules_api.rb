=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class PricingRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # (DEPRECATED) List pricing rules by price plan id and pricing schedule id
    # Get a list of pricing rules using price plan id and pricing schedule id
    # @param price_plan_id [String] 
    # @param pricing_schedule_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invoice_timing Optional field to filter pricing rules based on invoice timing
    # @return [PricingRulesPaginatedResponse]
    def list_pricing_rules_by_schedule_id(price_plan_id, pricing_schedule_id, opts = {})
      data, _status_code, _headers = list_pricing_rules_by_schedule_id_with_http_info(price_plan_id, pricing_schedule_id, opts)
      data
    end

    # (DEPRECATED) List pricing rules by price plan id and pricing schedule id
    # Get a list of pricing rules using price plan id and pricing schedule id
    # @param price_plan_id [String] 
    # @param pricing_schedule_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invoice_timing Optional field to filter pricing rules based on invoice timing
    # @return [Array<(PricingRulesPaginatedResponse, Integer, Hash)>] PricingRulesPaginatedResponse data, response status code and response headers
    def list_pricing_rules_by_schedule_id_with_http_info(price_plan_id, pricing_schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricingRulesApi.list_pricing_rules_by_schedule_id ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricingRulesApi.list_pricing_rules_by_schedule_id"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricingRulesApi.list_pricing_rules_by_schedule_id, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'pricing_schedule_id' is set
      if @api_client.config.client_side_validation && pricing_schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'pricing_schedule_id' when calling PricingRulesApi.list_pricing_rules_by_schedule_id"
      end
      if @api_client.config.client_side_validation && pricing_schedule_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "pricing_schedule_id" when calling PricingRulesApi.list_pricing_rules_by_schedule_id, the character length must be smaller than or equal to 50.'
      end

      allowable_values = ["IN_ADVANCE", "IN_ARREARS"]
      if @api_client.config.client_side_validation && opts[:'invoice_timing'] && !allowable_values.include?(opts[:'invoice_timing'])
        fail ArgumentError, "invalid value for \"invoice_timing\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/price_plans/{price_plan_id}/pricing_schedules/{pricing_schedule_id}/pricing_rules'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s)).sub('{' + 'pricing_schedule_id' + '}', CGI.escape(pricing_schedule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'invoice_timing'] = opts[:'invoice_timing'] if !opts[:'invoice_timing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricingRulesPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricingRulesApi.list_pricing_rules_by_schedule_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricingRulesApi#list_pricing_rules_by_schedule_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
