=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Aliases to account
    # Add aliases to an account using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param add_account_aliases_request [AddAccountAliasesRequest] Payload to add aliases to account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def add_aliases(account_id, add_account_aliases_request, opts = {})
      data, _status_code, _headers = add_aliases_with_http_info(account_id, add_account_aliases_request, opts)
      data
    end

    # Add Aliases to account
    # Add aliases to an account using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param add_account_aliases_request [AddAccountAliasesRequest] Payload to add aliases to account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def add_aliases_with_http_info(account_id, add_account_aliases_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.add_aliases ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.add_aliases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.add_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'add_account_aliases_request' is set
      if @api_client.config.client_side_validation && add_account_aliases_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_account_aliases_request' when calling AccountsApi.add_aliases"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/add_aliases'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_account_aliases_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.add_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#add_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an account
    # This API let’s you to create an account for a customer using customer_id.
    # @param create_account_request [CreateAccountRequest] Payload to create account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_account(create_account_request, opts = {})
      data, _status_code, _headers = create_account_with_http_info(create_account_request, opts)
      data
    end

    # Create an account
    # This API let’s you to create an account for a customer using customer_id.
    # @param create_account_request [CreateAccountRequest] Payload to create account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def create_account_with_http_info(create_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account ...'
      end
      # verify the required parameter 'create_account_request' is set
      if @api_client.config.client_side_validation && create_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_account_request' when calling AccountsApi.create_account"
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Propose a purchase of a plan
    # This API let’s you to create a proposal of a billing/entitlement plan for an account
    # @param account_id [String] account_id corresponding to an account
    # @param create_proposal_request [CreateProposalRequest] Payload to initiate a proposal
    # @param [Hash] opts the optional parameters
    # @return [Proposal]
    def create_proposal(account_id, create_proposal_request, opts = {})
      data, _status_code, _headers = create_proposal_with_http_info(account_id, create_proposal_request, opts)
      data
    end

    # (DEPRECATED) Propose a purchase of a plan
    # This API let’s you to create a proposal of a billing/entitlement plan for an account
    # @param account_id [String] account_id corresponding to an account
    # @param create_proposal_request [CreateProposalRequest] Payload to initiate a proposal
    # @param [Hash] opts the optional parameters
    # @return [Array<(Proposal, Integer, Hash)>] Proposal data, response status code and response headers
    def create_proposal_with_http_info(account_id, create_proposal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_proposal ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_proposal"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.create_proposal, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'create_proposal_request' is set
      if @api_client.config.client_side_validation && create_proposal_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_proposal_request' when calling AccountsApi.create_proposal"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/purchase_proposals'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_proposal_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Proposal'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_proposal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_proposal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an account
    # This API let’s you to delete a customer using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_account(account_id, opts = {})
      data, _status_code, _headers = delete_account_with_http_info(account_id, opts)
      data
    end

    # Delete an account
    # This API let’s you to delete a customer using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.delete_account, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an account
    # Get account information using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :effective_on 
    # @option opts [Boolean] :include_group_details 
    # @return [Account]
    def get_account(account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, opts)
      data
    end

    # Get an account
    # Get account information using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :effective_on 
    # @option opts [Boolean] :include_group_details 
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.get_account, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'effectiveOn'] = opts[:'effective_on'] if !opts[:'effective_on'].nil?
      query_params[:'includeGroupDetails'] = opts[:'include_group_details'] if !opts[:'include_group_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts of customer
    # Returns a list of accounts of a customer with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [AccountPaginatedResponse]
    def get_accounts(opts = {})
      data, _status_code, _headers = get_accounts_with_http_info(opts)
      data
    end

    # List accounts of customer
    # Returns a list of accounts of a customer with pagination and sort.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(AccountPaginatedResponse, Integer, Hash)>] AccountPaginatedResponse data, response status code and response headers
    def get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_accounts ...'
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) List pricing schedules of an account
    # Returns a list of pricing schedules of an account with pagination and sort.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @option opts [Boolean] :include_price_plan_info 
    # @option opts [Boolean] :compact 
    # @return [PricingSchedulePaginatedResponse]
    def get_pricing_schedules(account_id, opts = {})
      data, _status_code, _headers = get_pricing_schedules_with_http_info(account_id, opts)
      data
    end

    # (DEPRECATED) List pricing schedules of an account
    # Returns a list of pricing schedules of an account with pagination and sort.
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @option opts [Boolean] :include_price_plan_info 
    # @option opts [Boolean] :compact 
    # @return [Array<(PricingSchedulePaginatedResponse, Integer, Hash)>] PricingSchedulePaginatedResponse data, response status code and response headers
    def get_pricing_schedules_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_pricing_schedules ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_pricing_schedules"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.get_pricing_schedules, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/pricing_schedules'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'include_price_plan_info'] = opts[:'include_price_plan_info'] if !opts[:'include_price_plan_info'].nil?
      query_params[:'compact'] = opts[:'compact'] if !opts[:'compact'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricingSchedulePaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_pricing_schedules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_pricing_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Get proposal information
    # Get proposal information
    # @param purchase_proposal_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetProposalResponse]
    def get_proposal(purchase_proposal_id, opts = {})
      data, _status_code, _headers = get_proposal_with_http_info(purchase_proposal_id, opts)
      data
    end

    # (DEPRECATED) Get proposal information
    # Get proposal information
    # @param purchase_proposal_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProposalResponse, Integer, Hash)>] GetProposalResponse data, response status code and response headers
    def get_proposal_with_http_info(purchase_proposal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_proposal ...'
      end
      # verify the required parameter 'purchase_proposal_id' is set
      if @api_client.config.client_side_validation && purchase_proposal_id.nil?
        fail ArgumentError, "Missing the required parameter 'purchase_proposal_id' when calling AccountsApi.get_proposal"
      end
      if @api_client.config.client_side_validation && purchase_proposal_id.to_s.length > 512
        fail ArgumentError, 'invalid value for "purchase_proposal_id" when calling AccountsApi.get_proposal, the character length must be smaller than or equal to 512.'
      end

      # resource path
      local_var_path = '/purchase_proposals/{purchase_proposal_id}'.sub('{' + 'purchase_proposal_id' + '}', CGI.escape(purchase_proposal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProposalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_proposal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_proposal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Get a specific purchase of an account
    # Get purchase information of an account for a specific plan using account_id and price_plan_id
    # @param purchase_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetPurchaseResponse]
    def get_purchase(purchase_id, opts = {})
      data, _status_code, _headers = get_purchase_with_http_info(purchase_id, opts)
      data
    end

    # (DEPRECATED) Get a specific purchase of an account
    # Get purchase information of an account for a specific plan using account_id and price_plan_id
    # @param purchase_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPurchaseResponse, Integer, Hash)>] GetPurchaseResponse data, response status code and response headers
    def get_purchase_with_http_info(purchase_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_purchase ...'
      end
      # verify the required parameter 'purchase_id' is set
      if @api_client.config.client_side_validation && purchase_id.nil?
        fail ArgumentError, "Missing the required parameter 'purchase_id' when calling AccountsApi.get_purchase"
      end
      if @api_client.config.client_side_validation && purchase_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "purchase_id" when calling AccountsApi.get_purchase, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/purchases/{purchase_id}'.sub('{' + 'purchase_id' + '}', CGI.escape(purchase_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPurchaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_purchase",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_purchase\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Initiate a purchase
    # This API let’s you to initiate a purchase for an account
    # @param account_id [String] account_id corresponding to an account
    # @param create_purchase_request [CreatePurchaseRequest] Payload to initiate a purchase
    # @param [Hash] opts the optional parameters
    # @return [Purchase]
    def initiate_one_time_entitlement_plan(account_id, create_purchase_request, opts = {})
      data, _status_code, _headers = initiate_one_time_entitlement_plan_with_http_info(account_id, create_purchase_request, opts)
      data
    end

    # (DEPRECATED) Initiate a purchase
    # This API let’s you to initiate a purchase for an account
    # @param account_id [String] account_id corresponding to an account
    # @param create_purchase_request [CreatePurchaseRequest] Payload to initiate a purchase
    # @param [Hash] opts the optional parameters
    # @return [Array<(Purchase, Integer, Hash)>] Purchase data, response status code and response headers
    def initiate_one_time_entitlement_plan_with_http_info(account_id, create_purchase_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.initiate_one_time_entitlement_plan ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.initiate_one_time_entitlement_plan"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.initiate_one_time_entitlement_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'create_purchase_request' is set
      if @api_client.config.client_side_validation && create_purchase_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_purchase_request' when calling AccountsApi.initiate_one_time_entitlement_plan"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/purchases'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_purchase_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Purchase'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.initiate_one_time_entitlement_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#initiate_one_time_entitlement_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all aliases of an account
    # Get all aliases of an account using account_id
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [AccountAliasesPaginatedResponse]
    def list_account_aliases(account_id, opts = {})
      data, _status_code, _headers = list_account_aliases_with_http_info(account_id, opts)
      data
    end

    # Get all aliases of an account
    # Get all aliases of an account using account_id
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAliasesPaginatedResponse, Integer, Hash)>] AccountAliasesPaginatedResponse data, response status code and response headers
    def list_account_aliases_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_aliases ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.list_account_aliases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.list_account_aliases, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/account_aliases'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountAliasesPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) List all proposals of an account
    # List all proposals of an account
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [ProposalsPaginatedResponse]
    def list_account_proposals(account_id, opts = {})
      data, _status_code, _headers = list_account_proposals_with_http_info(account_id, opts)
      data
    end

    # (DEPRECATED) List all proposals of an account
    # List all proposals of an account
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProposalsPaginatedResponse, Integer, Hash)>] ProposalsPaginatedResponse data, response status code and response headers
    def list_account_proposals_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_proposals ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.list_account_proposals"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.list_account_proposals, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/purchase_proposals'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProposalsPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_proposals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_proposals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Get all purchases for an account
    # Get Purchase information for an account using account_id and price_plan_id
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [PurchasePaginatedListData]
    def list_account_purchases(account_id, opts = {})
      data, _status_code, _headers = list_account_purchases_with_http_info(account_id, opts)
      data
    end

    # (DEPRECATED) Get all purchases for an account
    # Get Purchase information for an account using account_id and price_plan_id
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchasePaginatedListData, Integer, Hash)>] PurchasePaginatedListData data, response status code and response headers
    def list_account_purchases_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_purchases ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.list_account_purchases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.list_account_purchases, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/purchases'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PurchasePaginatedListData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_purchases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_purchases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Aliases to account
    # Remove existing aliases tagged to an account using this API
    # @param account_id [String] account_id corresponding to an account
    # @param remove_account_aliases_request [RemoveAccountAliasesRequest] Payload to remove aliases from account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def remove_aliases(account_id, remove_account_aliases_request, opts = {})
      data, _status_code, _headers = remove_aliases_with_http_info(account_id, remove_account_aliases_request, opts)
      data
    end

    # Remove Aliases to account
    # Remove existing aliases tagged to an account using this API
    # @param account_id [String] account_id corresponding to an account
    # @param remove_account_aliases_request [RemoveAccountAliasesRequest] Payload to remove aliases from account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def remove_aliases_with_http_info(account_id, remove_account_aliases_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.remove_aliases ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.remove_aliases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.remove_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'remove_account_aliases_request' is set
      if @api_client.config.client_side_validation && remove_account_aliases_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_account_aliases_request' when calling AccountsApi.remove_aliases"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/remove_aliases'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_account_aliases_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.remove_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#remove_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an account
    # This API let’s you to update an account’s information using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param update_account_request [UpdateAccountRequest] Payload to update account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def update_account(account_id, update_account_request, opts = {})
      data, _status_code, _headers = update_account_with_http_info(account_id, update_account_request, opts)
      data
    end

    # Update an account
    # This API let’s you to update an account’s information using customer_id and account_id.
    # @param account_id [String] account_id corresponding to an account
    # @param update_account_request [UpdateAccountRequest] Payload to update account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def update_account_with_http_info(account_id, update_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.update_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_account_request' is set
      if @api_client.config.client_side_validation && update_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_account_request' when calling AccountsApi.update_account"
      end
      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Dissociate or associate a price plan with an account
    # This API let’s you to detach or attach a price plan with an existing account
    # @param account_id [String] account_id corresponding to an account
    # @param update_pricing_schedule_request_with_actions [UpdatePricingScheduleRequestWithActions] Payload to associate or dissociate a price plan to an account with actions
    # @param [Hash] opts the optional parameters
    # @return [UpdatePricingScheduleResponse]
    def update_pricing_schedule(account_id, update_pricing_schedule_request_with_actions, opts = {})
      data, _status_code, _headers = update_pricing_schedule_with_http_info(account_id, update_pricing_schedule_request_with_actions, opts)
      data
    end

    # (DEPRECATED) Dissociate or associate a price plan with an account
    # This API let’s you to detach or attach a price plan with an existing account
    # @param account_id [String] account_id corresponding to an account
    # @param update_pricing_schedule_request_with_actions [UpdatePricingScheduleRequestWithActions] Payload to associate or dissociate a price plan to an account with actions
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatePricingScheduleResponse, Integer, Hash)>] UpdatePricingScheduleResponse data, response status code and response headers
    def update_pricing_schedule_with_http_info(account_id, update_pricing_schedule_request_with_actions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_pricing_schedule ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_pricing_schedule"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.update_pricing_schedule, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_pricing_schedule_request_with_actions' is set
      if @api_client.config.client_side_validation && update_pricing_schedule_request_with_actions.nil?
        fail ArgumentError, "Missing the required parameter 'update_pricing_schedule_request_with_actions' when calling AccountsApi.update_pricing_schedule"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/price_plans'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_pricing_schedule_request_with_actions)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePricingScheduleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_pricing_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_pricing_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Edit schedules of an account.
    # This API let’s you to detach/attach one or more price plans from/to an existing account
    # @param account_id [String] account_id corresponding to an account
    # @param edit_pricing_schedule_request [EditPricingScheduleRequest] Payload to dis/associate one or more price plans to an account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run 
    # @return [UpdatePricingScheduleResponse]
    def update_pricing_schedule_batch(account_id, edit_pricing_schedule_request, opts = {})
      data, _status_code, _headers = update_pricing_schedule_batch_with_http_info(account_id, edit_pricing_schedule_request, opts)
      data
    end

    # (DEPRECATED) Edit schedules of an account.
    # This API let’s you to detach/attach one or more price plans from/to an existing account
    # @param account_id [String] account_id corresponding to an account
    # @param edit_pricing_schedule_request [EditPricingScheduleRequest] Payload to dis/associate one or more price plans to an account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run 
    # @return [Array<(UpdatePricingScheduleResponse, Integer, Hash)>] UpdatePricingScheduleResponse data, response status code and response headers
    def update_pricing_schedule_batch_with_http_info(account_id, edit_pricing_schedule_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_pricing_schedule_batch ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_pricing_schedule_batch"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.update_pricing_schedule_batch, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'edit_pricing_schedule_request' is set
      if @api_client.config.client_side_validation && edit_pricing_schedule_request.nil?
        fail ArgumentError, "Missing the required parameter 'edit_pricing_schedule_request' when calling AccountsApi.update_pricing_schedule_batch"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/edit_schedules'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edit_pricing_schedule_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePricingScheduleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_pricing_schedule_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_pricing_schedule_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Approve or decline a purchase of a billing plan
    # This API let’s you to approve or decline a proposal of a billing plan for an account
    # @param purchase_proposal_id [String] 
    # @param update_proposal_status [UpdateProposalStatus] Payload to approve or decline a proposal
    # @param [Hash] opts the optional parameters
    # @return [Proposal]
    def update_proposal_status(purchase_proposal_id, update_proposal_status, opts = {})
      data, _status_code, _headers = update_proposal_status_with_http_info(purchase_proposal_id, update_proposal_status, opts)
      data
    end

    # (DEPRECATED) Approve or decline a purchase of a billing plan
    # This API let’s you to approve or decline a proposal of a billing plan for an account
    # @param purchase_proposal_id [String] 
    # @param update_proposal_status [UpdateProposalStatus] Payload to approve or decline a proposal
    # @param [Hash] opts the optional parameters
    # @return [Array<(Proposal, Integer, Hash)>] Proposal data, response status code and response headers
    def update_proposal_status_with_http_info(purchase_proposal_id, update_proposal_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_proposal_status ...'
      end
      # verify the required parameter 'purchase_proposal_id' is set
      if @api_client.config.client_side_validation && purchase_proposal_id.nil?
        fail ArgumentError, "Missing the required parameter 'purchase_proposal_id' when calling AccountsApi.update_proposal_status"
      end
      if @api_client.config.client_side_validation && purchase_proposal_id.to_s.length > 512
        fail ArgumentError, 'invalid value for "purchase_proposal_id" when calling AccountsApi.update_proposal_status, the character length must be smaller than or equal to 512.'
      end

      # verify the required parameter 'update_proposal_status' is set
      if @api_client.config.client_side_validation && update_proposal_status.nil?
        fail ArgumentError, "Missing the required parameter 'update_proposal_status' when calling AccountsApi.update_proposal_status"
      end
      # resource path
      local_var_path = '/purchase_proposals/{purchase_proposal_id}/update_status'.sub('{' + 'purchase_proposal_id' + '}', CGI.escape(purchase_proposal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_proposal_status)

      # return_type
      return_type = opts[:debug_return_type] || 'Proposal'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_proposal_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_proposal_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
