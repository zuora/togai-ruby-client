=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class PricePlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # (DEPRECATED) Activate a price plan
    # Activate a price plan details using price plan id
    # @param price_plan_id [String] 
    # @param activate_price_plan_request [ActivatePricePlanRequest] Payload to activate price plan
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def activate_price_plan(price_plan_id, activate_price_plan_request, opts = {})
      data, _status_code, _headers = activate_price_plan_with_http_info(price_plan_id, activate_price_plan_request, opts)
      data
    end

    # (DEPRECATED) Activate a price plan
    # Activate a price plan details using price plan id
    # @param price_plan_id [String] 
    # @param activate_price_plan_request [ActivatePricePlanRequest] Payload to activate price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def activate_price_plan_with_http_info(price_plan_id, activate_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.activate_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlansApi.activate_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlansApi.activate_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'activate_price_plan_request' is set
      if @api_client.config.client_side_validation && activate_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'activate_price_plan_request' when calling PricePlansApi.activate_price_plan"
      end
      # resource path
      local_var_path = '/price_plans/{price_plan_id}/activate'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(activate_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.activate_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#activate_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Archive a price plan
    # Archive a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def archive_price_plan(price_plan_id, opts = {})
      data, _status_code, _headers = archive_price_plan_with_http_info(price_plan_id, opts)
      data
    end

    # (DEPRECATED) Archive a price plan
    # Archive a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def archive_price_plan_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.archive_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlansApi.archive_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlansApi.archive_price_plan, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/price_plans/{price_plan_id}'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.archive_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#archive_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Create a price plan
    # This API let's you create and price plan Learn more about [Price Plans](https://docs.togai.com/docs/priceplan) 
    # @param create_price_plan_request [CreatePricePlanRequest] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run 
    # @return [PricePlan]
    def create_price_plan(create_price_plan_request, opts = {})
      data, _status_code, _headers = create_price_plan_with_http_info(create_price_plan_request, opts)
      data
    end

    # (DEPRECATED) Create a price plan
    # This API let&#39;s you create and price plan Learn more about [Price Plans](https://docs.togai.com/docs/priceplan) 
    # @param create_price_plan_request [CreatePricePlanRequest] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run 
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def create_price_plan_with_http_info(create_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.create_price_plan ...'
      end
      # verify the required parameter 'create_price_plan_request' is set
      if @api_client.config.client_side_validation && create_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_price_plan_request' when calling PricePlansApi.create_price_plan"
      end
      # resource path
      local_var_path = '/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.create_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#create_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Get a price plan
    # Get a price plan details using price plan id
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version Optional version to get a specific version. Gets latest version if it is not provided.
    # @return [PricePlan]
    def get_price_plan(price_plan_id, opts = {})
      data, _status_code, _headers = get_price_plan_with_http_info(price_plan_id, opts)
      data
    end

    # (DEPRECATED) Get a price plan
    # Get a price plan details using price plan id
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version Optional version to get a specific version. Gets latest version if it is not provided.
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def get_price_plan_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.get_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlansApi.get_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlansApi.get_price_plan, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/price_plans/{price_plan_id}'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.get_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#get_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) List price plans
    # Get a list of price plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [PricePlanPaginatedResponse]
    def get_price_plans(opts = {})
      data, _status_code, _headers = get_price_plans_with_http_info(opts)
      data
    end

    # (DEPRECATED) List price plans
    # Get a list of price plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(PricePlanPaginatedResponse, Integer, Hash)>] PricePlanPaginatedResponse data, response status code and response headers
    def get_price_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.get_price_plans ...'
      end
      # resource path
      local_var_path = '/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.get_price_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#get_price_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Create a price plan migration
    # Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai's Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
    # @param create_price_plan_migration_request [CreatePricePlanMigrationRequest] Payload to create price plan migration request
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def price_plan_migration(create_price_plan_migration_request, opts = {})
      data, _status_code, _headers = price_plan_migration_with_http_info(create_price_plan_migration_request, opts)
      data
    end

    # (DEPRECATED) Create a price plan migration
    # Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai&#39;s Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
    # @param create_price_plan_migration_request [CreatePricePlanMigrationRequest] Payload to create price plan migration request
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def price_plan_migration_with_http_info(create_price_plan_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.price_plan_migration ...'
      end
      # verify the required parameter 'create_price_plan_migration_request' is set
      if @api_client.config.client_side_validation && create_price_plan_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_price_plan_migration_request' when calling PricePlansApi.price_plan_migration"
      end
      # resource path
      local_var_path = '/price_plans/migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_price_plan_migration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.price_plan_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#price_plan_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (DEPRECATED) Update a price plan
    # Update an existing price plan Price Plans with status as DRAFT alone can be updated . Learn more about [Price plans](https://docs.togai.com/docs/priceplan) from our Guides 
    # @param price_plan_id [String] 
    # @param update_price_plan_request [UpdatePricePlanRequest] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def update_price_plan(price_plan_id, update_price_plan_request, opts = {})
      data, _status_code, _headers = update_price_plan_with_http_info(price_plan_id, update_price_plan_request, opts)
      data
    end

    # (DEPRECATED) Update a price plan
    # Update an existing price plan Price Plans with status as DRAFT alone can be updated . Learn more about [Price plans](https://docs.togai.com/docs/priceplan) from our Guides 
    # @param price_plan_id [String] 
    # @param update_price_plan_request [UpdatePricePlanRequest] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def update_price_plan_with_http_info(price_plan_id, update_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.update_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlansApi.update_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlansApi.update_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_price_plan_request' is set
      if @api_client.config.client_side_validation && update_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_price_plan_request' when calling PricePlansApi.update_price_plan"
      end
      # resource path
      local_var_path = '/price_plans/{price_plan_id}'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.update_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#update_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
