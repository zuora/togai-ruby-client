=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a setting
    # Get a setting
    # @param setting_id_str [String] 
    # @param [Hash] opts the optional parameters
    # @return [Setting]
    def get_setting(setting_id_str, opts = {})
      data, _status_code, _headers = get_setting_with_http_info(setting_id_str, opts)
      data
    end

    # Get a setting
    # Get a setting
    # @param setting_id_str [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Setting, Integer, Hash)>] Setting data, response status code and response headers
    def get_setting_with_http_info(setting_id_str, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_setting ...'
      end
      # verify the required parameter 'setting_id_str' is set
      if @api_client.config.client_side_validation && setting_id_str.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id_str' when calling SettingsApi.get_setting"
      end
      # resource path
      local_var_path = '/settings/{setting_id_str}'.sub('{' + 'setting_id_str' + '}', CGI.escape(setting_id_str.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Setting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SettingsApi.get_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a setting
    # Create a setting
    # @param setting [Setting] Payload to insert setting
    # @param [Hash] opts the optional parameters
    # @return [Setting]
    def insert_setting(setting, opts = {})
      data, _status_code, _headers = insert_setting_with_http_info(setting, opts)
      data
    end

    # Create a setting
    # Create a setting
    # @param setting [Setting] Payload to insert setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(Setting, Integer, Hash)>] Setting data, response status code and response headers
    def insert_setting_with_http_info(setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.insert_setting ...'
      end
      # verify the required parameter 'setting' is set
      if @api_client.config.client_side_validation && setting.nil?
        fail ArgumentError, "Missing the required parameter 'setting' when calling SettingsApi.insert_setting"
      end
      # resource path
      local_var_path = '/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(setting)

      # return_type
      return_type = opts[:debug_return_type] || 'Setting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SettingsApi.insert_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#insert_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists settings
    # List settings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @option opts [String] :entity_type 
    # @option opts [String] :entity_id 
    # @option opts [String] :setting_id 
    # @option opts [String] :namespace 
    # @return [SettingPaginatedResponse]
    def list_setting(opts = {})
      data, _status_code, _headers = list_setting_with_http_info(opts)
      data
    end

    # Lists settings
    # List settings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @option opts [String] :entity_type 
    # @option opts [String] :entity_id 
    # @option opts [String] :setting_id 
    # @option opts [String] :namespace 
    # @return [Array<(SettingPaginatedResponse, Integer, Hash)>] SettingPaginatedResponse data, response status code and response headers
    def list_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_setting ...'
      end
      # resource path
      local_var_path = '/settings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'entity_type'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'entity_id'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'setting_id'] = opts[:'setting_id'] if !opts[:'setting_id'].nil?
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SettingPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SettingsApi.list_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a setting
    # Update a setting
    # @param setting_id_str [String] 
    # @param update_setting_request [UpdateSettingRequest] Payload to update setting
    # @param [Hash] opts the optional parameters
    # @return [Setting]
    def update_setting(setting_id_str, update_setting_request, opts = {})
      data, _status_code, _headers = update_setting_with_http_info(setting_id_str, update_setting_request, opts)
      data
    end

    # Update a setting
    # Update a setting
    # @param setting_id_str [String] 
    # @param update_setting_request [UpdateSettingRequest] Payload to update setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(Setting, Integer, Hash)>] Setting data, response status code and response headers
    def update_setting_with_http_info(setting_id_str, update_setting_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_setting ...'
      end
      # verify the required parameter 'setting_id_str' is set
      if @api_client.config.client_side_validation && setting_id_str.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id_str' when calling SettingsApi.update_setting"
      end
      # verify the required parameter 'update_setting_request' is set
      if @api_client.config.client_side_validation && update_setting_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_setting_request' when calling SettingsApi.update_setting"
      end
      # resource path
      local_var_path = '/settings/{setting_id_str}'.sub('{' + 'setting_id_str' + '}', CGI.escape(setting_id_str.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_setting_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Setting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SettingsApi.update_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
