=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class PricePlanV2Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk rate card operations of a price plan
    # Bulk rate card operations of a price plan
    # @param price_plan_id [String] 
    # @param bulk_rate_card_operations_request [BulkRateCardOperationsRequest] Payload to bulk rate card operations
    # @param [Hash] opts the optional parameters
    # @return [BulkRateCardOperationsResponse]
    def bulk_price_plan_rate_card_operations(price_plan_id, bulk_rate_card_operations_request, opts = {})
      data, _status_code, _headers = bulk_price_plan_rate_card_operations_with_http_info(price_plan_id, bulk_rate_card_operations_request, opts)
      data
    end

    # Bulk rate card operations of a price plan
    # Bulk rate card operations of a price plan
    # @param price_plan_id [String] 
    # @param bulk_rate_card_operations_request [BulkRateCardOperationsRequest] Payload to bulk rate card operations
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkRateCardOperationsResponse, Integer, Hash)>] BulkRateCardOperationsResponse data, response status code and response headers
    def bulk_price_plan_rate_card_operations_with_http_info(price_plan_id, bulk_rate_card_operations_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.bulk_price_plan_rate_card_operations ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.bulk_price_plan_rate_card_operations"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.bulk_price_plan_rate_card_operations, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'bulk_rate_card_operations_request' is set
      if @api_client.config.client_side_validation && bulk_rate_card_operations_request.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_rate_card_operations_request' when calling PricePlanV2Api.bulk_price_plan_rate_card_operations"
      end
      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/rate_cards'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bulk_rate_card_operations_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BulkRateCardOperationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.bulk_price_plan_rate_card_operations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#bulk_price_plan_rate_card_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a price plan
    # Create a price plan
    # @param create_price_plan_v2_request [CreatePricePlanV2Request] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source_price_plan_id The source price plan id to be used as a reference for creating a new price plan. This is optional and can be used to copy the pricing rules and rate cards from the source price plan. 
    # @return [PricePlanV2]
    def create_price_plan_v2(create_price_plan_v2_request, opts = {})
      data, _status_code, _headers = create_price_plan_v2_with_http_info(create_price_plan_v2_request, opts)
      data
    end

    # Create a price plan
    # Create a price plan
    # @param create_price_plan_v2_request [CreatePricePlanV2Request] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source_price_plan_id The source price plan id to be used as a reference for creating a new price plan. This is optional and can be used to copy the pricing rules and rate cards from the source price plan. 
    # @return [Array<(PricePlanV2, Integer, Hash)>] PricePlanV2 data, response status code and response headers
    def create_price_plan_v2_with_http_info(create_price_plan_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.create_price_plan_v2 ...'
      end
      # verify the required parameter 'create_price_plan_v2_request' is set
      if @api_client.config.client_side_validation && create_price_plan_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_price_plan_v2_request' when calling PricePlanV2Api.create_price_plan_v2"
      end
      if @api_client.config.client_side_validation && !opts[:'source_price_plan_id'].nil? && opts[:'source_price_plan_id'].to_s.length > 50
        fail ArgumentError, 'invalid value for "opts[:"source_price_plan_id"]" when calling PricePlanV2Api.create_price_plan_v2, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source_price_plan_id'] = opts[:'source_price_plan_id'] if !opts[:'source_price_plan_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_price_plan_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.create_price_plan_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#create_price_plan_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Discard a price plan
    # Discard a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def discard_price_plan(price_plan_id, opts = {})
      data, _status_code, _headers = discard_price_plan_with_http_info(price_plan_id, opts)
      data
    end

    # Discard a price plan
    # Discard a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def discard_price_plan_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.discard_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.discard_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.discard_price_plan, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/discard'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.discard_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#discard_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finalize a price plan
    # Finalize a price plan
    # @param price_plan_id [String] 
    # @param finalize_price_plan_request [FinalizePricePlanRequest] Payload to finalize price plan
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def finalize_price_plan(price_plan_id, finalize_price_plan_request, opts = {})
      data, _status_code, _headers = finalize_price_plan_with_http_info(price_plan_id, finalize_price_plan_request, opts)
      data
    end

    # Finalize a price plan
    # Finalize a price plan
    # @param price_plan_id [String] 
    # @param finalize_price_plan_request [FinalizePricePlanRequest] Payload to finalize price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def finalize_price_plan_with_http_info(price_plan_id, finalize_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.finalize_price_plan ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.finalize_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.finalize_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'finalize_price_plan_request' is set
      if @api_client.config.client_side_validation && finalize_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'finalize_price_plan_request' when calling PricePlanV2Api.finalize_price_plan"
      end
      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/finalize'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(finalize_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.finalize_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#finalize_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a price plan
    # Get a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans 
    # @return [PricePlanV2]
    def get_price_plan_v2(price_plan_id, opts = {})
      data, _status_code, _headers = get_price_plan_v2_with_http_info(price_plan_id, opts)
      data
    end

    # Get a price plan
    # Get a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans 
    # @return [Array<(PricePlanV2, Integer, Hash)>] PricePlanV2 data, response status code and response headers
    def get_price_plan_v2_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.get_price_plan_v2 ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.get_price_plan_v2"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.get_price_plan_v2, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.get_price_plan_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#get_price_plan_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of errors of a price plan
    # Get list of errors of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ValidatedEntityErrorsPaginatedResponse]
    def list_price_plan_errors(price_plan_id, opts = {})
      data, _status_code, _headers = list_price_plan_errors_with_http_info(price_plan_id, opts)
      data
    end

    # Get list of errors of a price plan
    # Get list of errors of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidatedEntityErrorsPaginatedResponse, Integer, Hash)>] ValidatedEntityErrorsPaginatedResponse data, response status code and response headers
    def list_price_plan_errors_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.list_price_plan_errors ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.list_price_plan_errors"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.list_price_plan_errors, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/errors'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ValidatedEntityErrorsPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.list_price_plan_errors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#list_price_plan_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pricing rules of a price plan
    # List pricing rules of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans 
    # @return [PricingRulesPaginatedResponse]
    def list_price_plan_pricing_rules(price_plan_id, opts = {})
      data, _status_code, _headers = list_price_plan_pricing_rules_with_http_info(price_plan_id, opts)
      data
    end

    # List pricing rules of a price plan
    # List pricing rules of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans 
    # @return [Array<(PricingRulesPaginatedResponse, Integer, Hash)>] PricingRulesPaginatedResponse data, response status code and response headers
    def list_price_plan_pricing_rules_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.list_price_plan_pricing_rules ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.list_price_plan_pricing_rules"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.list_price_plan_pricing_rules, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/pricing_rules'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricingRulesPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.list_price_plan_pricing_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#list_price_plan_pricing_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List rate cards of a price plan
    # List rate cards of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [RateCardPaginatedResponse]
    def list_price_plan_rate_cards(price_plan_id, opts = {})
      data, _status_code, _headers = list_price_plan_rate_cards_with_http_info(price_plan_id, opts)
      data
    end

    # List rate cards of a price plan
    # List rate cards of a price plan
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(RateCardPaginatedResponse, Integer, Hash)>] RateCardPaginatedResponse data, response status code and response headers
    def list_price_plan_rate_cards_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.list_price_plan_rate_cards ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.list_price_plan_rate_cards"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.list_price_plan_rate_cards, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/rate_cards'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RateCardPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.list_price_plan_rate_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#list_price_plan_rate_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List price plan versions
    # List price plan versions
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [PricePlanV2PaginatedResponse]
    def list_price_plan_versions(price_plan_id, opts = {})
      data, _status_code, _headers = list_price_plan_versions_with_http_info(price_plan_id, opts)
      data
    end

    # List price plan versions
    # List price plan versions
    # @param price_plan_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(PricePlanV2PaginatedResponse, Integer, Hash)>] PricePlanV2PaginatedResponse data, response status code and response headers
    def list_price_plan_versions_with_http_info(price_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.list_price_plan_versions ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.list_price_plan_versions"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.list_price_plan_versions, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/versions'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanV2PaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.list_price_plan_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#list_price_plan_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List price plans
    # List price plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [PricePlanV2PaginatedResponse]
    def list_price_plans_v2(opts = {})
      data, _status_code, _headers = list_price_plans_v2_with_http_info(opts)
      data
    end

    # List price plans
    # List price plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [Float] :page_size 
    # @return [Array<(PricePlanV2PaginatedResponse, Integer, Hash)>] PricePlanV2PaginatedResponse data, response status code and response headers
    def list_price_plans_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.list_price_plans_v2 ...'
      end
      # resource path
      local_var_path = '/v2/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanV2PaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.list_price_plans_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#list_price_plans_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a price plan v2 migration
    # Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai's Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
    # @param create_price_plan_migration_request [CreatePricePlanMigrationRequest] Payload to create price plan migration request
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def price_plan_migration_v2(create_price_plan_migration_request, opts = {})
      data, _status_code, _headers = price_plan_migration_v2_with_http_info(create_price_plan_migration_request, opts)
      data
    end

    # Create a price plan v2 migration
    # Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai&#39;s Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
    # @param create_price_plan_migration_request [CreatePricePlanMigrationRequest] Payload to create price plan migration request
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def price_plan_migration_v2_with_http_info(create_price_plan_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.price_plan_migration_v2 ...'
      end
      # verify the required parameter 'create_price_plan_migration_request' is set
      if @api_client.config.client_side_validation && create_price_plan_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_price_plan_migration_request' when calling PricePlanV2Api.price_plan_migration_v2"
      end
      # resource path
      local_var_path = '/v2/price_plans/migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_price_plan_migration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.price_plan_migration_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#price_plan_migration_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pricing rules of a price plan
    # Update pricing rules of a price plan
    # @param price_plan_id [String] 
    # @param update_pricing_rules_request [UpdatePricingRulesRequest] Payload to update pricing rules
    # @param [Hash] opts the optional parameters
    # @return [PricingRulesPaginatedResponse]
    def update_price_plan_pricing_rules(price_plan_id, update_pricing_rules_request, opts = {})
      data, _status_code, _headers = update_price_plan_pricing_rules_with_http_info(price_plan_id, update_pricing_rules_request, opts)
      data
    end

    # Update pricing rules of a price plan
    # Update pricing rules of a price plan
    # @param price_plan_id [String] 
    # @param update_pricing_rules_request [UpdatePricingRulesRequest] Payload to update pricing rules
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricingRulesPaginatedResponse, Integer, Hash)>] PricingRulesPaginatedResponse data, response status code and response headers
    def update_price_plan_pricing_rules_with_http_info(price_plan_id, update_pricing_rules_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.update_price_plan_pricing_rules ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.update_price_plan_pricing_rules"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.update_price_plan_pricing_rules, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_pricing_rules_request' is set
      if @api_client.config.client_side_validation && update_pricing_rules_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_pricing_rules_request' when calling PricePlanV2Api.update_price_plan_pricing_rules"
      end
      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}/pricing_rules'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_pricing_rules_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricingRulesPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.update_price_plan_pricing_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#update_price_plan_pricing_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a price plan
    # Update a price plan
    # @param price_plan_id [String] 
    # @param update_price_plan_v2_request [UpdatePricePlanV2Request] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [PricePlanV2]
    def update_price_plan_v2(price_plan_id, update_price_plan_v2_request, opts = {})
      data, _status_code, _headers = update_price_plan_v2_with_http_info(price_plan_id, update_price_plan_v2_request, opts)
      data
    end

    # Update a price plan
    # Update a price plan
    # @param price_plan_id [String] 
    # @param update_price_plan_v2_request [UpdatePricePlanV2Request] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlanV2, Integer, Hash)>] PricePlanV2 data, response status code and response headers
    def update_price_plan_v2_with_http_info(price_plan_id, update_price_plan_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlanV2Api.update_price_plan_v2 ...'
      end
      # verify the required parameter 'price_plan_id' is set
      if @api_client.config.client_side_validation && price_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_id' when calling PricePlanV2Api.update_price_plan_v2"
      end
      if @api_client.config.client_side_validation && price_plan_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_id" when calling PricePlanV2Api.update_price_plan_v2, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_price_plan_v2_request' is set
      if @api_client.config.client_side_validation && update_price_plan_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_price_plan_v2_request' when calling PricePlanV2Api.update_price_plan_v2"
      end
      # resource path
      local_var_path = '/v2/price_plans/{price_plan_id}'.sub('{' + 'price_plan_id' + '}', CGI.escape(price_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_price_plan_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlanV2Api.update_price_plan_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlanV2Api#update_price_plan_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
