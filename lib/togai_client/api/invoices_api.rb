=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module TogaiClient
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a custom invoice for an account
    # Create a custom invoice for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomInvoiceRequest] :create_custom_invoice_request Payload to create invoice
    # @return [Invoice]
    def create_custom_invoice(opts = {})
      data, _status_code, _headers = create_custom_invoice_with_http_info(opts)
      data
    end

    # Create a custom invoice for an account
    # Create a custom invoice for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomInvoiceRequest] :create_custom_invoice_request Payload to create invoice
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def create_custom_invoice_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.create_custom_invoice ...'
      end
      # resource path
      local_var_path = '/invoices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_custom_invoice_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Invoice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.create_custom_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_custom_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a bill run job request
    # Create a bill run job request
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :require_confirmation Specifies whether to start a migration only after a confirmation
    # @return [BaseSuccessResponse]
    def create_invoice_bill_run(opts = {})
      data, _status_code, _headers = create_invoice_bill_run_with_http_info(opts)
      data
    end

    # Create a bill run job request
    # Create a bill run job request
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :require_confirmation Specifies whether to start a migration only after a confirmation
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def create_invoice_bill_run_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.create_invoice_bill_run ...'
      end
      # resource path
      local_var_path = '/invoices/bill_runs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'require_confirmation'] = opts[:'require_confirmation'] if !opts[:'require_confirmation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.create_invoice_bill_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_invoice_bill_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a custom invoice in DRAFT state
    # Delete a custom invoice in DRAFT state.
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_custom_invoice(invoice_id, opts = {})
      data, _status_code, _headers = delete_custom_invoice_with_http_info(invoice_id, opts)
      data
    end

    # Delete a custom invoice in DRAFT state
    # Delete a custom invoice in DRAFT state.
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_custom_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.delete_custom_invoice ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.delete_custom_invoice"
      end
      # resource path
      local_var_path = '/invoices/{invoice_id}'.sub('{' + 'invoice_id' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.delete_custom_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#delete_custom_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an invoice
    # Get invoice
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def get_invoice(invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_with_http_info(invoice_id, opts)
      data
    end

    # Get an invoice
    # Get invoice
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def get_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_invoice ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_invoice"
      end
      # resource path
      local_var_path = '/invoices/{invoice_id}'.sub('{' + 'invoice_id' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Invoice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.get_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoices
    # List invoices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter by status.
    # @option opts [String] :owner_id Filter option to filter based on owner id.
    # @option opts [String] :customer_id Filter option to filter based on customer id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [ListInvoicesResponse]
    def list_invoices(opts = {})
      data, _status_code, _headers = list_invoices_with_http_info(opts)
      data
    end

    # List invoices
    # List invoices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter by status.
    # @option opts [String] :owner_id Filter option to filter based on owner id.
    # @option opts [String] :customer_id Filter option to filter based on customer id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [Array<(ListInvoicesResponse, Integer, Hash)>] ListInvoicesResponse data, response status code and response headers
    def list_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.list_invoices ...'
      end
      # resource path
      local_var_path = '/invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'owner_id'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListInvoicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.list_invoices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#list_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoices eligible for bill run
    # List invoices eligible for bill run
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter by status.
    # @option opts [String] :owner_id Filter option to filter based on owner id.
    # @option opts [String] :customer_id Filter option to filter based on customer id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [ListInvoicesResponse]
    def list_invoices_for_bill_run(opts = {})
      data, _status_code, _headers = list_invoices_for_bill_run_with_http_info(opts)
      data
    end

    # List invoices eligible for bill run
    # List invoices eligible for bill run
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter by status.
    # @option opts [String] :owner_id Filter option to filter based on owner id.
    # @option opts [String] :customer_id Filter option to filter based on customer id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [Array<(ListInvoicesResponse, Integer, Hash)>] ListInvoicesResponse data, response status code and response headers
    def list_invoices_for_bill_run_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.list_invoices_for_bill_run ...'
      end
      # resource path
      local_var_path = '/invoices/bill_runs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'owner_id'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListInvoicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.list_invoices_for_bill_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#list_invoices_for_bill_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pricing rule logs
    # List pricing rule logs
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PricingRulesLogsPaginatedResponse]
    def list_pricing_rule_logs(invoice_id, opts = {})
      data, _status_code, _headers = list_pricing_rule_logs_with_http_info(invoice_id, opts)
      data
    end

    # List pricing rule logs
    # List pricing rule logs
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricingRulesLogsPaginatedResponse, Integer, Hash)>] PricingRulesLogsPaginatedResponse data, response status code and response headers
    def list_pricing_rule_logs_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.list_pricing_rule_logs ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.list_pricing_rule_logs"
      end
      # resource path
      local_var_path = '/invoice/{invoice_id}/pricing_rules_logs'.sub('{' + 'invoice_id' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricingRulesLogsPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.list_pricing_rule_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#list_pricing_rule_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update miscellaneous charges in upcoming Invoice for a account
    # Add or update miscellaneous charges in upcoming Invoice for a account
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [ManageMiscellaneousChargesRequest] :manage_miscellaneous_charges_request Payload to update custom line items
    # @return [MiscellaneousChargesResponse]
    def manage_miscellaneous_charges_in_account(account_id, opts = {})
      data, _status_code, _headers = manage_miscellaneous_charges_in_account_with_http_info(account_id, opts)
      data
    end

    # Add or update miscellaneous charges in upcoming Invoice for a account
    # Add or update miscellaneous charges in upcoming Invoice for a account
    # @param account_id [String] account_id corresponding to an account
    # @param [Hash] opts the optional parameters
    # @option opts [ManageMiscellaneousChargesRequest] :manage_miscellaneous_charges_request Payload to update custom line items
    # @return [Array<(MiscellaneousChargesResponse, Integer, Hash)>] MiscellaneousChargesResponse data, response status code and response headers
    def manage_miscellaneous_charges_in_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.manage_miscellaneous_charges_in_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InvoicesApi.manage_miscellaneous_charges_in_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling InvoicesApi.manage_miscellaneous_charges_in_account, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/miscellaneous_charges'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'manage_miscellaneous_charges_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MiscellaneousChargesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.manage_miscellaneous_charges_in_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#manage_miscellaneous_charges_in_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update miscellaneous charges in Invoice
    # Add or update miscellaneous charges in Invoice
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ManageMiscellaneousChargesRequest] :manage_miscellaneous_charges_request Payload to update custom line items
    # @return [MiscellaneousChargesResponse]
    def manage_miscellaneous_charges_in_invoice(invoice_id, opts = {})
      data, _status_code, _headers = manage_miscellaneous_charges_in_invoice_with_http_info(invoice_id, opts)
      data
    end

    # Add or update miscellaneous charges in Invoice
    # Add or update miscellaneous charges in Invoice
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ManageMiscellaneousChargesRequest] :manage_miscellaneous_charges_request Payload to update custom line items
    # @return [Array<(MiscellaneousChargesResponse, Integer, Hash)>] MiscellaneousChargesResponse data, response status code and response headers
    def manage_miscellaneous_charges_in_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.manage_miscellaneous_charges_in_invoice ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.manage_miscellaneous_charges_in_invoice"
      end
      # resource path
      local_var_path = '/invoices/{invoice_id}/miscellaneous_charges'.sub('{' + 'invoice_id' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'manage_miscellaneous_charges_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MiscellaneousChargesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.manage_miscellaneous_charges_in_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#manage_miscellaneous_charges_in_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an invoice
    # Update an invoice[Only CUSTOM invoices in DRAFT state support updating of all fields]. Updating status can be done for all invoice.
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateInvoiceRequest] :update_invoice_request Payload to update an invoice
    # @return [Invoice]
    def update_invoice(invoice_id, opts = {})
      data, _status_code, _headers = update_invoice_with_http_info(invoice_id, opts)
      data
    end

    # Update an invoice
    # Update an invoice[Only CUSTOM invoices in DRAFT state support updating of all fields]. Updating status can be done for all invoice.
    # @param invoice_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateInvoiceRequest] :update_invoice_request Payload to update an invoice
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def update_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.update_invoice ...'
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.update_invoice"
      end
      # resource path
      local_var_path = '/invoices/{invoice_id}'.sub('{' + 'invoice_id' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_invoice_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Invoice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InvoicesApi.update_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#update_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
