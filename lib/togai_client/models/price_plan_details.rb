=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  class PricePlanDetails
    attr_accessor :supported_currencies

    attr_accessor :active_currencies

    attr_accessor :pricing_cycle_config

    attr_accessor :usage_rate_cards

    attr_accessor :fixed_fee_rate_cards

    attr_accessor :license_rate_cards

    attr_accessor :billing_entitlement_rate_cards

    attr_accessor :entitlement_overage_rate_cards

    attr_accessor :minimum_commitment

    attr_accessor :credit_grant_rate_cards

    attr_accessor :type

    attr_accessor :deferred_revenue

    # Allow changes to price plan from the beginning of the ongoing cycle. type: boolean 
    attr_accessor :allow_ongoing_cycle_updates

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'supported_currencies' => :'supportedCurrencies',
        :'active_currencies' => :'activeCurrencies',
        :'pricing_cycle_config' => :'pricingCycleConfig',
        :'usage_rate_cards' => :'usageRateCards',
        :'fixed_fee_rate_cards' => :'fixedFeeRateCards',
        :'license_rate_cards' => :'licenseRateCards',
        :'billing_entitlement_rate_cards' => :'billingEntitlementRateCards',
        :'entitlement_overage_rate_cards' => :'entitlementOverageRateCards',
        :'minimum_commitment' => :'minimumCommitment',
        :'credit_grant_rate_cards' => :'creditGrantRateCards',
        :'type' => :'type',
        :'deferred_revenue' => :'deferredRevenue',
        :'allow_ongoing_cycle_updates' => :'allow_ongoing_cycle_updates'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'supported_currencies' => :'Array<String>',
        :'active_currencies' => :'Array<String>',
        :'pricing_cycle_config' => :'PricingCycleConfig',
        :'usage_rate_cards' => :'Array<UsageRateCard>',
        :'fixed_fee_rate_cards' => :'Array<FixedFeeRateCard>',
        :'license_rate_cards' => :'Array<LicenseRateCard>',
        :'billing_entitlement_rate_cards' => :'Array<BillingEntitlementRateCard>',
        :'entitlement_overage_rate_cards' => :'Array<EntitlementOverageRateCard>',
        :'minimum_commitment' => :'MinimumCommitment',
        :'credit_grant_rate_cards' => :'Array<CreditGrantRateCard>',
        :'type' => :'PricePlanType',
        :'deferred_revenue' => :'Boolean',
        :'allow_ongoing_cycle_updates' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'allow_ongoing_cycle_updates'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::PricePlanDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::PricePlanDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'supported_currencies')
        if (value = attributes[:'supported_currencies']).is_a?(Array)
          self.supported_currencies = value
        end
      else
        self.supported_currencies = nil
      end

      if attributes.key?(:'active_currencies')
        if (value = attributes[:'active_currencies']).is_a?(Array)
          self.active_currencies = value
        end
      else
        self.active_currencies = nil
      end

      if attributes.key?(:'pricing_cycle_config')
        self.pricing_cycle_config = attributes[:'pricing_cycle_config']
      end

      if attributes.key?(:'usage_rate_cards')
        if (value = attributes[:'usage_rate_cards']).is_a?(Array)
          self.usage_rate_cards = value
        end
      end

      if attributes.key?(:'fixed_fee_rate_cards')
        if (value = attributes[:'fixed_fee_rate_cards']).is_a?(Array)
          self.fixed_fee_rate_cards = value
        end
      end

      if attributes.key?(:'license_rate_cards')
        if (value = attributes[:'license_rate_cards']).is_a?(Array)
          self.license_rate_cards = value
        end
      end

      if attributes.key?(:'billing_entitlement_rate_cards')
        if (value = attributes[:'billing_entitlement_rate_cards']).is_a?(Array)
          self.billing_entitlement_rate_cards = value
        end
      end

      if attributes.key?(:'entitlement_overage_rate_cards')
        if (value = attributes[:'entitlement_overage_rate_cards']).is_a?(Array)
          self.entitlement_overage_rate_cards = value
        end
      end

      if attributes.key?(:'minimum_commitment')
        self.minimum_commitment = attributes[:'minimum_commitment']
      end

      if attributes.key?(:'credit_grant_rate_cards')
        if (value = attributes[:'credit_grant_rate_cards']).is_a?(Array)
          self.credit_grant_rate_cards = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'deferred_revenue')
        self.deferred_revenue = attributes[:'deferred_revenue']
      end

      if attributes.key?(:'allow_ongoing_cycle_updates')
        self.allow_ongoing_cycle_updates = attributes[:'allow_ongoing_cycle_updates']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @supported_currencies.nil?
        invalid_properties.push('invalid value for "supported_currencies", supported_currencies cannot be nil.')
      end

      if @active_currencies.nil?
        invalid_properties.push('invalid value for "active_currencies", active_currencies cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @supported_currencies.nil?
      return false if @active_currencies.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] supported_currencies Value to be assigned
    def supported_currencies=(supported_currencies)
      if supported_currencies.nil?
        fail ArgumentError, 'supported_currencies cannot be nil'
      end

      @supported_currencies = supported_currencies
    end

    # Custom attribute writer method with validation
    # @param [Object] active_currencies Value to be assigned
    def active_currencies=(active_currencies)
      if active_currencies.nil?
        fail ArgumentError, 'active_currencies cannot be nil'
      end

      @active_currencies = active_currencies
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          supported_currencies == o.supported_currencies &&
          active_currencies == o.active_currencies &&
          pricing_cycle_config == o.pricing_cycle_config &&
          usage_rate_cards == o.usage_rate_cards &&
          fixed_fee_rate_cards == o.fixed_fee_rate_cards &&
          license_rate_cards == o.license_rate_cards &&
          billing_entitlement_rate_cards == o.billing_entitlement_rate_cards &&
          entitlement_overage_rate_cards == o.entitlement_overage_rate_cards &&
          minimum_commitment == o.minimum_commitment &&
          credit_grant_rate_cards == o.credit_grant_rate_cards &&
          type == o.type &&
          deferred_revenue == o.deferred_revenue &&
          allow_ongoing_cycle_updates == o.allow_ongoing_cycle_updates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [supported_currencies, active_currencies, pricing_cycle_config, usage_rate_cards, fixed_fee_rate_cards, license_rate_cards, billing_entitlement_rate_cards, entitlement_overage_rate_cards, minimum_commitment, credit_grant_rate_cards, type, deferred_revenue, allow_ongoing_cycle_updates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
