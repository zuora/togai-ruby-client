=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  # Represents a Purchase
  class Purchase
    attr_accessor :id

    attr_accessor :account_id

    # Id of the price plan, Required for ENTITLEMENT_GRANT, ASSOCIATION purchase
    attr_accessor :price_plan_id

    attr_accessor :quantity

    attr_accessor :rate_card_quantities

    attr_accessor :idempotency_key

    attr_accessor :price_plan_version

    attr_accessor :purchase_plan_override

    attr_accessor :association_override

    attr_accessor :wallet_topup_details

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :effective_from

    attr_accessor :effective_until

    attr_accessor :expiry_date

    attr_accessor :price

    attr_accessor :invoice_id

    attr_accessor :invoice_currency

    attr_accessor :status

    attr_accessor :type

    attr_accessor :comment

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'account_id' => :'accountId',
        :'price_plan_id' => :'pricePlanId',
        :'quantity' => :'quantity',
        :'rate_card_quantities' => :'rateCardQuantities',
        :'idempotency_key' => :'idempotencyKey',
        :'price_plan_version' => :'pricePlanVersion',
        :'purchase_plan_override' => :'purchasePlanOverride',
        :'association_override' => :'associationOverride',
        :'wallet_topup_details' => :'walletTopupDetails',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'effective_from' => :'effectiveFrom',
        :'effective_until' => :'effectiveUntil',
        :'expiry_date' => :'expiryDate',
        :'price' => :'price',
        :'invoice_id' => :'invoiceId',
        :'invoice_currency' => :'invoiceCurrency',
        :'status' => :'status',
        :'type' => :'type',
        :'comment' => :'comment'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'account_id' => :'String',
        :'price_plan_id' => :'String',
        :'quantity' => :'Integer',
        :'rate_card_quantities' => :'Hash<String, Float>',
        :'idempotency_key' => :'String',
        :'price_plan_version' => :'Integer',
        :'purchase_plan_override' => :'PricePlanDetailsOverride',
        :'association_override' => :'CreatePricePlanDetailsOverride',
        :'wallet_topup_details' => :'WalletTopupDetails',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'effective_from' => :'Date',
        :'effective_until' => :'Date',
        :'expiry_date' => :'Time',
        :'price' => :'Float',
        :'invoice_id' => :'String',
        :'invoice_currency' => :'String',
        :'status' => :'PurchaseStatus',
        :'type' => :'PurchaseType',
        :'comment' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::Purchase` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::Purchase`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      else
        self.account_id = nil
      end

      if attributes.key?(:'price_plan_id')
        self.price_plan_id = attributes[:'price_plan_id']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'rate_card_quantities')
        if (value = attributes[:'rate_card_quantities']).is_a?(Hash)
          self.rate_card_quantities = value
        end
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'price_plan_version')
        self.price_plan_version = attributes[:'price_plan_version']
      end

      if attributes.key?(:'purchase_plan_override')
        self.purchase_plan_override = attributes[:'purchase_plan_override']
      end

      if attributes.key?(:'association_override')
        self.association_override = attributes[:'association_override']
      end

      if attributes.key?(:'wallet_topup_details')
        self.wallet_topup_details = attributes[:'wallet_topup_details']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'effective_from')
        self.effective_from = attributes[:'effective_from']
      end

      if attributes.key?(:'effective_until')
        self.effective_until = attributes[:'effective_until']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'invoice_id')
        self.invoice_id = attributes[:'invoice_id']
      end

      if attributes.key?(:'invoice_currency')
        self.invoice_currency = attributes[:'invoice_currency']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @account_id.to_s.length < 1
        invalid_properties.push('invalid value for "account_id", the character length must be great than or equal to 1.')
      end

      if !@price_plan_id.nil? && @price_plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "price_plan_id", the character length must be great than or equal to 1.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @account_id.nil?
      return false if @account_id.to_s.length < 1
      return false if !@price_plan_id.nil? && @price_plan_id.to_s.length < 1
      return false if @created_at.nil?
      return false if @status.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_id Value to be assigned
    def account_id=(account_id)
      if account_id.nil?
        fail ArgumentError, 'account_id cannot be nil'
      end

      if account_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "account_id", the character length must be great than or equal to 1.'
      end

      @account_id = account_id
    end

    # Custom attribute writer method with validation
    # @param [Object] price_plan_id Value to be assigned
    def price_plan_id=(price_plan_id)
      if price_plan_id.nil?
        fail ArgumentError, 'price_plan_id cannot be nil'
      end

      if price_plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "price_plan_id", the character length must be great than or equal to 1.'
      end

      @price_plan_id = price_plan_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          account_id == o.account_id &&
          price_plan_id == o.price_plan_id &&
          quantity == o.quantity &&
          rate_card_quantities == o.rate_card_quantities &&
          idempotency_key == o.idempotency_key &&
          price_plan_version == o.price_plan_version &&
          purchase_plan_override == o.purchase_plan_override &&
          association_override == o.association_override &&
          wallet_topup_details == o.wallet_topup_details &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          effective_from == o.effective_from &&
          effective_until == o.effective_until &&
          expiry_date == o.expiry_date &&
          price == o.price &&
          invoice_id == o.invoice_id &&
          invoice_currency == o.invoice_currency &&
          status == o.status &&
          type == o.type &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, account_id, price_plan_id, quantity, rate_card_quantities, idempotency_key, price_plan_version, purchase_plan_override, association_override, wallet_topup_details, created_at, updated_at, effective_from, effective_until, expiry_date, price, invoice_id, invoice_currency, status, type, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
