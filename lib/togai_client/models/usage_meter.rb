=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  # Structure of usage meter
  class UsageMeter
    # Identifier of the usage meter
    attr_accessor :id

    # Name of the usage meter
    attr_accessor :name

    # Billable name of addon. Billable name takes precedence over name to display in invoice.
    attr_accessor :billable_name

    # Display name of usage meter. This is an auto-generated field which contains billableName of usage meter. If billableName is not provided, name will be used as display name. 
    attr_accessor :display_name

    attr_accessor :description

    attr_accessor :filters

    # Type of usage meter
    attr_accessor :type

    # Status of usage meter
    attr_accessor :status

    attr_accessor :aggregation

    attr_accessor :computations

    attr_accessor :event_schema

    attr_accessor :created_at

    attr_accessor :last_activated_at

    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'billable_name' => :'billableName',
        :'display_name' => :'displayName',
        :'description' => :'description',
        :'filters' => :'filters',
        :'type' => :'type',
        :'status' => :'status',
        :'aggregation' => :'aggregation',
        :'computations' => :'computations',
        :'event_schema' => :'eventSchema',
        :'created_at' => :'createdAt',
        :'last_activated_at' => :'lastActivatedAt',
        :'updated_at' => :'updatedAt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'billable_name' => :'String',
        :'display_name' => :'String',
        :'description' => :'String',
        :'filters' => :'Array<UsageMeterFilterEntry>',
        :'type' => :'String',
        :'status' => :'String',
        :'aggregation' => :'UsageMeterAggregation',
        :'computations' => :'Array<Computation>',
        :'event_schema' => :'EventSchema',
        :'created_at' => :'Time',
        :'last_activated_at' => :'Time',
        :'updated_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::UsageMeter` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::UsageMeter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'billable_name')
        self.billable_name = attributes[:'billable_name']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      else
        self.display_name = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'filters')
        if (value = attributes[:'filters']).is_a?(Array)
          self.filters = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'aggregation')
        self.aggregation = attributes[:'aggregation']
      else
        self.aggregation = nil
      end

      if attributes.key?(:'computations')
        if (value = attributes[:'computations']).is_a?(Array)
          self.computations = value
        end
      end

      if attributes.key?(:'event_schema')
        self.event_schema = attributes[:'event_schema']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'last_activated_at')
        self.last_activated_at = attributes[:'last_activated_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id.to_s.length > 20
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 20.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      pattern = Regexp.new(/^[\sa-zA-Z0-9_-]*$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if !@billable_name.nil? && @billable_name.to_s.length > 255
        invalid_properties.push('invalid value for "billable_name", the character length must be smaller than or equal to 255.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @aggregation.nil?
        invalid_properties.push('invalid value for "aggregation", aggregation cannot be nil.')
      end

      if !@computations.nil? && @computations.length > 1
        invalid_properties.push('invalid value for "computations", number of items must be less than or equal to 1.')
      end

      if !@computations.nil? && @computations.length < 0
        invalid_properties.push('invalid value for "computations", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @id.to_s.length > 20
      return false if @name.nil?
      return false if @name.to_s.length > 50
      return false if @name !~ Regexp.new(/^[\sa-zA-Z0-9_-]*$/)
      return false if !@billable_name.nil? && @billable_name.to_s.length > 255
      return false if @display_name.nil?
      return false if @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 255
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["COUNTER"])
      return false unless type_validator.valid?(@type)
      status_validator = EnumAttributeValidator.new('String', ["DRAFT", "ACTIVE", "INACTIVE", "ARCHIVED"])
      return false unless status_validator.valid?(@status)
      return false if @aggregation.nil?
      return false if !@computations.nil? && @computations.length > 1
      return false if !@computations.nil? && @computations.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 20
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 20.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[\sa-zA-Z0-9_-]*$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] billable_name Value to be assigned
    def billable_name=(billable_name)
      if billable_name.nil?
        fail ArgumentError, 'billable_name cannot be nil'
      end

      if billable_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "billable_name", the character length must be smaller than or equal to 255.'
      end

      @billable_name = billable_name
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["COUNTER"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DRAFT", "ACTIVE", "INACTIVE", "ARCHIVED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] computations Value to be assigned
    def computations=(computations)
      if computations.nil?
        fail ArgumentError, 'computations cannot be nil'
      end

      if computations.length > 1
        fail ArgumentError, 'invalid value for "computations", number of items must be less than or equal to 1.'
      end

      if computations.length < 0
        fail ArgumentError, 'invalid value for "computations", number of items must be greater than or equal to 0.'
      end

      @computations = computations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          billable_name == o.billable_name &&
          display_name == o.display_name &&
          description == o.description &&
          filters == o.filters &&
          type == o.type &&
          status == o.status &&
          aggregation == o.aggregation &&
          computations == o.computations &&
          event_schema == o.event_schema &&
          created_at == o.created_at &&
          last_activated_at == o.last_activated_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, billable_name, display_name, description, filters, type, status, aggregation, computations, event_schema, created_at, last_activated_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
