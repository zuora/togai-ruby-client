=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  class InvoiceGroupAccountsPaginatedResponse
    attr_accessor :id

    attr_accessor :name

    attr_accessor :email

    attr_accessor :daily_invoice_consolidation

    attr_accessor :net_term_days

    attr_accessor :invoice_currency

    attr_accessor :billing_address

    attr_accessor :accounts_count

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :accounts

    attr_accessor :next_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'email' => :'email',
        :'daily_invoice_consolidation' => :'dailyInvoiceConsolidation',
        :'net_term_days' => :'netTermDays',
        :'invoice_currency' => :'invoiceCurrency',
        :'billing_address' => :'billingAddress',
        :'accounts_count' => :'accountsCount',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'accounts' => :'accounts',
        :'next_token' => :'nextToken'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'email' => :'String',
        :'daily_invoice_consolidation' => :'Boolean',
        :'net_term_days' => :'Integer',
        :'invoice_currency' => :'String',
        :'billing_address' => :'Address',
        :'accounts_count' => :'Integer',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'accounts' => :'Array<String>',
        :'next_token' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'InvoiceGroups'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::InvoiceGroupAccountsPaginatedResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::InvoiceGroupAccountsPaginatedResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'daily_invoice_consolidation')
        self.daily_invoice_consolidation = attributes[:'daily_invoice_consolidation']
      else
        self.daily_invoice_consolidation = nil
      end

      if attributes.key?(:'net_term_days')
        self.net_term_days = attributes[:'net_term_days']
      end

      if attributes.key?(:'invoice_currency')
        self.invoice_currency = attributes[:'invoice_currency']
      else
        self.invoice_currency = nil
      end

      if attributes.key?(:'billing_address')
        self.billing_address = attributes[:'billing_address']
      else
        self.billing_address = nil
      end

      if attributes.key?(:'accounts_count')
        self.accounts_count = attributes[:'accounts_count']
      else
        self.accounts_count = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'accounts')
        if (value = attributes[:'accounts']).is_a?(Array)
          self.accounts = value
        end
      else
        self.accounts = nil
      end

      if attributes.key?(:'next_token')
        self.next_token = attributes[:'next_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length > 320
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 320.')
      end

      if @daily_invoice_consolidation.nil?
        invalid_properties.push('invalid value for "daily_invoice_consolidation", daily_invoice_consolidation cannot be nil.')
      end

      if @invoice_currency.nil?
        invalid_properties.push('invalid value for "invoice_currency", invoice_currency cannot be nil.')
      end

      if @billing_address.nil?
        invalid_properties.push('invalid value for "billing_address", billing_address cannot be nil.')
      end

      if @accounts_count.nil?
        invalid_properties.push('invalid value for "accounts_count", accounts_count cannot be nil.')
      end

      if @accounts_count < 0
        invalid_properties.push('invalid value for "accounts_count", must be greater than or equal to 0.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @accounts.nil?
        invalid_properties.push('invalid value for "accounts", accounts cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @email.nil?
      return false if @email.to_s.length > 320
      return false if @daily_invoice_consolidation.nil?
      return false if @invoice_currency.nil?
      return false if @billing_address.nil?
      return false if @accounts_count.nil?
      return false if @accounts_count < 0
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @accounts.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 320
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 320.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] accounts_count Value to be assigned
    def accounts_count=(accounts_count)
      if accounts_count.nil?
        fail ArgumentError, 'accounts_count cannot be nil'
      end

      if accounts_count < 0
        fail ArgumentError, 'invalid value for "accounts_count", must be greater than or equal to 0.'
      end

      @accounts_count = accounts_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          email == o.email &&
          daily_invoice_consolidation == o.daily_invoice_consolidation &&
          net_term_days == o.net_term_days &&
          invoice_currency == o.invoice_currency &&
          billing_address == o.billing_address &&
          accounts_count == o.accounts_count &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          accounts == o.accounts &&
          next_token == o.next_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, email, daily_invoice_consolidation, net_term_days, invoice_currency, billing_address, accounts_count, created_at, updated_at, accounts, next_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
