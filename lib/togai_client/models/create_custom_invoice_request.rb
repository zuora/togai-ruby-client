=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  # Payload to create invoice
  class CreateCustomInvoiceRequest
    attr_accessor :account_id

    attr_accessor :owner_type

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :idempotency_key

    # Status to create an invoice in.
    attr_accessor :status

    attr_accessor :line_items

    # This property defines the behaviour of status transition of the invoice. If true, invoice auto transitions from `DRAFT` to `DUE` or `PAID` at the end of pricing cycle. If false, the invoice’s state doesn’t automatically advance without an explicit action. Default: false 
    attr_accessor :auto_advance

    # This property defines the behaviour of whether or not to use credits to net off with the invoice amount. Default: true 
    attr_accessor :apply_credits

    # This property defines the behaviour of whether or not to use wallet amount to net off with the invoice amount. Default: true 
    attr_accessor :apply_wallet_balance

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'accountId',
        :'owner_type' => :'ownerType',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'idempotency_key' => :'idempotencyKey',
        :'status' => :'status',
        :'line_items' => :'lineItems',
        :'auto_advance' => :'autoAdvance',
        :'apply_credits' => :'applyCredits',
        :'apply_wallet_balance' => :'applyWalletBalance'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'owner_type' => :'String',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'idempotency_key' => :'String',
        :'status' => :'String',
        :'line_items' => :'Array<CustomInvoiceLineItem>',
        :'auto_advance' => :'Boolean',
        :'apply_credits' => :'Boolean',
        :'apply_wallet_balance' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::CreateCustomInvoiceRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::CreateCustomInvoiceRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      else
        self.account_id = nil
      end

      if attributes.key?(:'owner_type')
        self.owner_type = attributes[:'owner_type']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      else
        self.start_date = nil
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      else
        self.end_date = nil
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'line_items')
        if (value = attributes[:'line_items']).is_a?(Array)
          self.line_items = value
        end
      else
        self.line_items = nil
      end

      if attributes.key?(:'auto_advance')
        self.auto_advance = attributes[:'auto_advance']
      end

      if attributes.key?(:'apply_credits')
        self.apply_credits = attributes[:'apply_credits']
      end

      if attributes.key?(:'apply_wallet_balance')
        self.apply_wallet_balance = attributes[:'apply_wallet_balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @line_items.nil?
        invalid_properties.push('invalid value for "line_items", line_items cannot be nil.')
      end

      if @line_items.length > 50
        invalid_properties.push('invalid value for "line_items", number of items must be less than or equal to 50.')
      end

      if @line_items.length < 1
        invalid_properties.push('invalid value for "line_items", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_id.nil?
      owner_type_validator = EnumAttributeValidator.new('String', ["ACCOUNT", "INVOICE_GROUP"])
      return false unless owner_type_validator.valid?(@owner_type)
      return false if @start_date.nil?
      return false if @end_date.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["DRAFT", "DUE", "PAID"])
      return false unless status_validator.valid?(@status)
      return false if @line_items.nil?
      return false if @line_items.length > 50
      return false if @line_items.length < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner_type Object to be assigned
    def owner_type=(owner_type)
      validator = EnumAttributeValidator.new('String', ["ACCOUNT", "INVOICE_GROUP"])
      unless validator.valid?(owner_type)
        fail ArgumentError, "invalid value for \"owner_type\", must be one of #{validator.allowable_values}."
      end
      @owner_type = owner_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DRAFT", "DUE", "PAID"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] line_items Value to be assigned
    def line_items=(line_items)
      if line_items.nil?
        fail ArgumentError, 'line_items cannot be nil'
      end

      if line_items.length > 50
        fail ArgumentError, 'invalid value for "line_items", number of items must be less than or equal to 50.'
      end

      if line_items.length < 1
        fail ArgumentError, 'invalid value for "line_items", number of items must be greater than or equal to 1.'
      end

      @line_items = line_items
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          owner_type == o.owner_type &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          idempotency_key == o.idempotency_key &&
          status == o.status &&
          line_items == o.line_items &&
          auto_advance == o.auto_advance &&
          apply_credits == o.apply_credits &&
          apply_wallet_balance == o.apply_wallet_balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_id, owner_type, start_date, end_date, idempotency_key, status, line_items, auto_advance, apply_credits, apply_wallet_balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
