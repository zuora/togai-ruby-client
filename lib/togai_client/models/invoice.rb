=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module TogaiClient
  # Structure of invoice
  class Invoice
    # Identifier of invoice
    attr_accessor :id

    attr_accessor :customer_id

    attr_accessor :owner_id

    attr_accessor :price_plan_id

    attr_accessor :usage_info

    attr_accessor :revenue_info

    attr_accessor :invoice_details

    attr_accessor :status

    attr_accessor :finalizing_status

    attr_accessor :invoice_class

    attr_accessor :invoice_type

    attr_accessor :auto_advance

    # Start date of the invoice
    attr_accessor :start_date

    # End date of the invoice
    attr_accessor :end_date

    # Inclusive end date of the invoice
    attr_accessor :end_date_inclusive

    # Invoice date of the invoice
    attr_accessor :invoice_date

    # Due date of the invoice
    attr_accessor :due_date

    attr_accessor :generated_at

    attr_accessor :updated_at

    attr_accessor :metadata

    attr_accessor :info

    # Sequence id of the invoice
    attr_accessor :sequence_id

    # Download URL of the pdf file corresponding to the invoice
    attr_accessor :pdf_url

    attr_accessor :total_amount

    attr_accessor :paid_amount

    # Number of days from the invoice date after which an invoice is considered overdue.
    attr_accessor :net_term_days

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'customer_id' => :'customerId',
        :'owner_id' => :'ownerId',
        :'price_plan_id' => :'pricePlanId',
        :'usage_info' => :'usageInfo',
        :'revenue_info' => :'revenueInfo',
        :'invoice_details' => :'invoiceDetails',
        :'status' => :'status',
        :'finalizing_status' => :'finalizingStatus',
        :'invoice_class' => :'invoiceClass',
        :'invoice_type' => :'invoiceType',
        :'auto_advance' => :'autoAdvance',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'end_date_inclusive' => :'endDateInclusive',
        :'invoice_date' => :'invoiceDate',
        :'due_date' => :'dueDate',
        :'generated_at' => :'generatedAt',
        :'updated_at' => :'updatedAt',
        :'metadata' => :'metadata',
        :'info' => :'info',
        :'sequence_id' => :'sequenceId',
        :'pdf_url' => :'pdfUrl',
        :'total_amount' => :'totalAmount',
        :'paid_amount' => :'paidAmount',
        :'net_term_days' => :'netTermDays'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'customer_id' => :'String',
        :'owner_id' => :'String',
        :'price_plan_id' => :'String',
        :'usage_info' => :'Array<InvoiceLineItem>',
        :'revenue_info' => :'InvoiceLineItem',
        :'invoice_details' => :'InvoiceDetails',
        :'status' => :'InvoicesStatus',
        :'finalizing_status' => :'String',
        :'invoice_class' => :'InvoicesClass',
        :'invoice_type' => :'InvoicesType',
        :'auto_advance' => :'Boolean',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'end_date_inclusive' => :'Time',
        :'invoice_date' => :'Time',
        :'due_date' => :'Time',
        :'generated_at' => :'Time',
        :'updated_at' => :'Time',
        :'metadata' => :'Hash<String, Object>',
        :'info' => :'Array<InvoiceInfoInner>',
        :'sequence_id' => :'String',
        :'pdf_url' => :'String',
        :'total_amount' => :'Float',
        :'paid_amount' => :'Float',
        :'net_term_days' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TogaiClient::Invoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TogaiClient::Invoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'price_plan_id')
        self.price_plan_id = attributes[:'price_plan_id']
      end

      if attributes.key?(:'usage_info')
        if (value = attributes[:'usage_info']).is_a?(Array)
          self.usage_info = value
        end
      end

      if attributes.key?(:'revenue_info')
        self.revenue_info = attributes[:'revenue_info']
      end

      if attributes.key?(:'invoice_details')
        self.invoice_details = attributes[:'invoice_details']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'finalizing_status')
        self.finalizing_status = attributes[:'finalizing_status']
      end

      if attributes.key?(:'invoice_class')
        self.invoice_class = attributes[:'invoice_class']
      else
        self.invoice_class = nil
      end

      if attributes.key?(:'invoice_type')
        self.invoice_type = attributes[:'invoice_type']
      else
        self.invoice_type = nil
      end

      if attributes.key?(:'auto_advance')
        self.auto_advance = attributes[:'auto_advance']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'end_date_inclusive')
        self.end_date_inclusive = attributes[:'end_date_inclusive']
      end

      if attributes.key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      else
        self.invoice_date = nil
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'generated_at')
        self.generated_at = attributes[:'generated_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.key?(:'info')
        if (value = attributes[:'info']).is_a?(Array)
          self.info = value
        end
      end

      if attributes.key?(:'sequence_id')
        self.sequence_id = attributes[:'sequence_id']
      end

      if attributes.key?(:'pdf_url')
        self.pdf_url = attributes[:'pdf_url']
      end

      if attributes.key?(:'total_amount')
        self.total_amount = attributes[:'total_amount']
      else
        self.total_amount = nil
      end

      if attributes.key?(:'paid_amount')
        self.paid_amount = attributes[:'paid_amount']
      else
        self.paid_amount = nil
      end

      if attributes.key?(:'net_term_days')
        self.net_term_days = attributes[:'net_term_days']
      else
        self.net_term_days = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id.to_s.length > 50
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 50.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @invoice_class.nil?
        invalid_properties.push('invalid value for "invoice_class", invoice_class cannot be nil.')
      end

      if @invoice_type.nil?
        invalid_properties.push('invalid value for "invoice_type", invoice_type cannot be nil.')
      end

      if @invoice_date.nil?
        invalid_properties.push('invalid value for "invoice_date", invoice_date cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @total_amount.nil?
        invalid_properties.push('invalid value for "total_amount", total_amount cannot be nil.')
      end

      if @paid_amount.nil?
        invalid_properties.push('invalid value for "paid_amount", paid_amount cannot be nil.')
      end

      if @net_term_days.nil?
        invalid_properties.push('invalid value for "net_term_days", net_term_days cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @id.to_s.length > 50
      return false if @status.nil?
      finalizing_status_validator = EnumAttributeValidator.new('String', ["FINALIZING", "FINALIZED"])
      return false unless finalizing_status_validator.valid?(@finalizing_status)
      return false if @invoice_class.nil?
      return false if @invoice_type.nil?
      return false if @invoice_date.nil?
      return false if @updated_at.nil?
      return false if @total_amount.nil?
      return false if @paid_amount.nil?
      return false if @net_term_days.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 50
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 50.'
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] finalizing_status Object to be assigned
    def finalizing_status=(finalizing_status)
      validator = EnumAttributeValidator.new('String', ["FINALIZING", "FINALIZED"])
      unless validator.valid?(finalizing_status)
        fail ArgumentError, "invalid value for \"finalizing_status\", must be one of #{validator.allowable_values}."
      end
      @finalizing_status = finalizing_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          customer_id == o.customer_id &&
          owner_id == o.owner_id &&
          price_plan_id == o.price_plan_id &&
          usage_info == o.usage_info &&
          revenue_info == o.revenue_info &&
          invoice_details == o.invoice_details &&
          status == o.status &&
          finalizing_status == o.finalizing_status &&
          invoice_class == o.invoice_class &&
          invoice_type == o.invoice_type &&
          auto_advance == o.auto_advance &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          end_date_inclusive == o.end_date_inclusive &&
          invoice_date == o.invoice_date &&
          due_date == o.due_date &&
          generated_at == o.generated_at &&
          updated_at == o.updated_at &&
          metadata == o.metadata &&
          info == o.info &&
          sequence_id == o.sequence_id &&
          pdf_url == o.pdf_url &&
          total_amount == o.total_amount &&
          paid_amount == o.paid_amount &&
          net_term_days == o.net_term_days
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, customer_id, owner_id, price_plan_id, usage_info, revenue_info, invoice_details, status, finalizing_status, invoice_class, invoice_type, auto_advance, start_date, end_date, end_date_inclusive, invoice_date, due_date, generated_at, updated_at, metadata, info, sequence_id, pdf_url, total_amount, paid_amount, net_term_days].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TogaiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
